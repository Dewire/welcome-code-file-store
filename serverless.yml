service: file-store

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dynamodb-local

custom:
  serverless-offline:
    port:                   4000
  bucket:                   welcome-file-storage
  UserPools:
    # https://github.com/serverless/serverless/issues/3212
    cont-UserPool:                arn:aws:cognito-idp:eu-west-1:318366659664:userpool/eu-west-1_382SlvR4l
    dev-UserPool:                 arn:aws:cognito-idp:eu-west-1:318366659664:userpool/eu-west-1_fc1nxDC89
    prod-UserPool:                arn:aws:cognito-idp:eu-west-1:318366659664:userpool/eu-west-1_DMDEYIQNl

provider:
  name:                     aws
  runtime:                  nodejs10.x
  stage:                    ${opt:stage, 'cont'}
  region:                   eu-west-1
  domain:              ${env:DOMAIN, opt:domain, 'welcome.dewire.com'}
  deploymentBucket:
    name:                   lambdas.${self:provider.stage}.${self:provider.domain}
  stackTags:
    STACK:                  "${self:service}"
    REGION:                 "${self:provider.region}"
    COMMIT:                 "${opt:commit}"
  iamRoleStatements:
    - Effect:               Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
      Resource:             "arn:aws:s3:::${self:custom.bucket}/*"

  environment:
    BUCKET:                 ${self:custom.bucket}
    UPLOAD_LINK_DURATION:   120 # SECONDS

functions:
  file-store:
    handler: api/handler.file
    events:
      - http:
          method:           ANY
          path:             file-store/{proxy+}
          authorizer:
            arn:             ${self:custom.UserPools.${self:provider.stage}-UserPool}
